//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
// 
#pragma warning disable 1591

namespace Client.Service {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SoapServerSoap", Namespace="http://tempuri.org/")]
    public partial class SoapServer : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SendCmdOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReadCmdOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClearCmdOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendOutputOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReadOutputOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClearOutputOperationCompleted;
        
        private System.Threading.SendOrPostCallback IfCMDRunOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetForCMDRunOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAllForNoCMDRunOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsUserRegisteredOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterOperationCompleted;
        
        private System.Threading.SendOrPostCallback IfBrowserDumpOperationCompleted;
        
        private System.Threading.SendOrPostCallback IfInstalledAplicationDumpOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetForNoApplicationDumpOperationCompleted;
        
        private System.Threading.SendOrPostCallback IfKeyLogDumpOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetForNoKeyDumpOperationCompleted;
        
        private System.Threading.SendOrPostCallback IfKeyScreenShareOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetMyScreenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMyScreenOperationCompleted;
        
        private System.Threading.SendOrPostCallback IfWebCamDumpOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetMyWebCamOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMyWebCamOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetForNoBrowserDumpOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetForBrowserDumpOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReceiveMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIfConnectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIfUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetForConnectOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetForNoConnectOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAllForConnectOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAllForNoConnectOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetForUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetForNoUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAllForUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAllForNoUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAssemblyOperationCompleted;
        
        private System.Threading.SendOrPostCallback WriteFileOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SoapServer() {
            this.Url = global::Client.Properties.Settings.Default.Client_Service_SoapServer;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SendCmdCompletedEventHandler SendCmdCompleted;
        
        /// <remarks/>
        public event ReadCmdCompletedEventHandler ReadCmdCompleted;
        
        /// <remarks/>
        public event ClearCmdCompletedEventHandler ClearCmdCompleted;
        
        /// <remarks/>
        public event SendOutputCompletedEventHandler SendOutputCompleted;
        
        /// <remarks/>
        public event ReadOutputCompletedEventHandler ReadOutputCompleted;
        
        /// <remarks/>
        public event ClearOutputCompletedEventHandler ClearOutputCompleted;
        
        /// <remarks/>
        public event IfCMDRunCompletedEventHandler IfCMDRunCompleted;
        
        /// <remarks/>
        public event SetForCMDRunCompletedEventHandler SetForCMDRunCompleted;
        
        /// <remarks/>
        public event SetAllForNoCMDRunCompletedEventHandler SetAllForNoCMDRunCompleted;
        
        /// <remarks/>
        public event AddUserCompletedEventHandler AddUserCompleted;
        
        /// <remarks/>
        public event IsUserRegisteredCompletedEventHandler IsUserRegisteredCompleted;
        
        /// <remarks/>
        public event RegisterCompletedEventHandler RegisterCompleted;
        
        /// <remarks/>
        public event IfBrowserDumpCompletedEventHandler IfBrowserDumpCompleted;
        
        /// <remarks/>
        public event IfInstalledAplicationDumpCompletedEventHandler IfInstalledAplicationDumpCompleted;
        
        /// <remarks/>
        public event SetForNoApplicationDumpCompletedEventHandler SetForNoApplicationDumpCompleted;
        
        /// <remarks/>
        public event IfKeyLogDumpCompletedEventHandler IfKeyLogDumpCompleted;
        
        /// <remarks/>
        public event SetForNoKeyDumpCompletedEventHandler SetForNoKeyDumpCompleted;
        
        /// <remarks/>
        public event IfKeyScreenShareCompletedEventHandler IfKeyScreenShareCompleted;
        
        /// <remarks/>
        public event SetMyScreenCompletedEventHandler SetMyScreenCompleted;
        
        /// <remarks/>
        public event GetMyScreenCompletedEventHandler GetMyScreenCompleted;
        
        /// <remarks/>
        public event IfWebCamDumpCompletedEventHandler IfWebCamDumpCompleted;
        
        /// <remarks/>
        public event SetMyWebCamCompletedEventHandler SetMyWebCamCompleted;
        
        /// <remarks/>
        public event GetMyWebCamCompletedEventHandler GetMyWebCamCompleted;
        
        /// <remarks/>
        public event SetForNoBrowserDumpCompletedEventHandler SetForNoBrowserDumpCompleted;
        
        /// <remarks/>
        public event SetForBrowserDumpCompletedEventHandler SetForBrowserDumpCompleted;
        
        /// <remarks/>
        public event GetUsersCompletedEventHandler GetUsersCompleted;
        
        /// <remarks/>
        public event RemoveUserCompletedEventHandler RemoveUserCompleted;
        
        /// <remarks/>
        public event SendMessageCompletedEventHandler SendMessageCompleted;
        
        /// <remarks/>
        public event ReceiveMessageCompletedEventHandler ReceiveMessageCompleted;
        
        /// <remarks/>
        public event GetIfConnectCompletedEventHandler GetIfConnectCompleted;
        
        /// <remarks/>
        public event GetIfUpdateCompletedEventHandler GetIfUpdateCompleted;
        
        /// <remarks/>
        public event RegisterValueCompletedEventHandler RegisterValueCompleted;
        
        /// <remarks/>
        public event SetForConnectCompletedEventHandler SetForConnectCompleted;
        
        /// <remarks/>
        public event SetForNoConnectCompletedEventHandler SetForNoConnectCompleted;
        
        /// <remarks/>
        public event SetAllForConnectCompletedEventHandler SetAllForConnectCompleted;
        
        /// <remarks/>
        public event SetAllForNoConnectCompletedEventHandler SetAllForNoConnectCompleted;
        
        /// <remarks/>
        public event SetForUpdateCompletedEventHandler SetForUpdateCompleted;
        
        /// <remarks/>
        public event SetForNoUpdateCompletedEventHandler SetForNoUpdateCompleted;
        
        /// <remarks/>
        public event SetAllForUpdateCompletedEventHandler SetAllForUpdateCompleted;
        
        /// <remarks/>
        public event SetAllForNoUpdateCompletedEventHandler SetAllForNoUpdateCompleted;
        
        /// <remarks/>
        public event SelectUsersCompletedEventHandler SelectUsersCompleted;
        
        /// <remarks/>
        public event GetAssemblyCompletedEventHandler GetAssemblyCompleted;
        
        /// <remarks/>
        public event WriteFileCompletedEventHandler WriteFileCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendCmd", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendCmd(string cmd) {
            this.Invoke("SendCmd", new object[] {
                        cmd});
        }
        
        /// <remarks/>
        public void SendCmdAsync(string cmd) {
            this.SendCmdAsync(cmd, null);
        }
        
        /// <remarks/>
        public void SendCmdAsync(string cmd, object userState) {
            if ((this.SendCmdOperationCompleted == null)) {
                this.SendCmdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendCmdOperationCompleted);
            }
            this.InvokeAsync("SendCmd", new object[] {
                        cmd}, this.SendCmdOperationCompleted, userState);
        }
        
        private void OnSendCmdOperationCompleted(object arg) {
            if ((this.SendCmdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendCmdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReadCmd", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReadCmd() {
            object[] results = this.Invoke("ReadCmd", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReadCmdAsync() {
            this.ReadCmdAsync(null);
        }
        
        /// <remarks/>
        public void ReadCmdAsync(object userState) {
            if ((this.ReadCmdOperationCompleted == null)) {
                this.ReadCmdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReadCmdOperationCompleted);
            }
            this.InvokeAsync("ReadCmd", new object[0], this.ReadCmdOperationCompleted, userState);
        }
        
        private void OnReadCmdOperationCompleted(object arg) {
            if ((this.ReadCmdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReadCmdCompleted(this, new ReadCmdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ClearCmd", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ClearCmd() {
            this.Invoke("ClearCmd", new object[0]);
        }
        
        /// <remarks/>
        public void ClearCmdAsync() {
            this.ClearCmdAsync(null);
        }
        
        /// <remarks/>
        public void ClearCmdAsync(object userState) {
            if ((this.ClearCmdOperationCompleted == null)) {
                this.ClearCmdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearCmdOperationCompleted);
            }
            this.InvokeAsync("ClearCmd", new object[0], this.ClearCmdOperationCompleted, userState);
        }
        
        private void OnClearCmdOperationCompleted(object arg) {
            if ((this.ClearCmdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClearCmdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendOutput", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendOutput(string cmd) {
            this.Invoke("SendOutput", new object[] {
                        cmd});
        }
        
        /// <remarks/>
        public void SendOutputAsync(string cmd) {
            this.SendOutputAsync(cmd, null);
        }
        
        /// <remarks/>
        public void SendOutputAsync(string cmd, object userState) {
            if ((this.SendOutputOperationCompleted == null)) {
                this.SendOutputOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendOutputOperationCompleted);
            }
            this.InvokeAsync("SendOutput", new object[] {
                        cmd}, this.SendOutputOperationCompleted, userState);
        }
        
        private void OnSendOutputOperationCompleted(object arg) {
            if ((this.SendOutputCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendOutputCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReadOutput", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReadOutput() {
            object[] results = this.Invoke("ReadOutput", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReadOutputAsync() {
            this.ReadOutputAsync(null);
        }
        
        /// <remarks/>
        public void ReadOutputAsync(object userState) {
            if ((this.ReadOutputOperationCompleted == null)) {
                this.ReadOutputOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReadOutputOperationCompleted);
            }
            this.InvokeAsync("ReadOutput", new object[0], this.ReadOutputOperationCompleted, userState);
        }
        
        private void OnReadOutputOperationCompleted(object arg) {
            if ((this.ReadOutputCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReadOutputCompleted(this, new ReadOutputCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ClearOutput", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ClearOutput() {
            this.Invoke("ClearOutput", new object[0]);
        }
        
        /// <remarks/>
        public void ClearOutputAsync() {
            this.ClearOutputAsync(null);
        }
        
        /// <remarks/>
        public void ClearOutputAsync(object userState) {
            if ((this.ClearOutputOperationCompleted == null)) {
                this.ClearOutputOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearOutputOperationCompleted);
            }
            this.InvokeAsync("ClearOutput", new object[0], this.ClearOutputOperationCompleted, userState);
        }
        
        private void OnClearOutputOperationCompleted(object arg) {
            if ((this.ClearOutputCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClearOutputCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IfCMDRun", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IfCMDRun(string strUser) {
            object[] results = this.Invoke("IfCMDRun", new object[] {
                        strUser});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IfCMDRunAsync(string strUser) {
            this.IfCMDRunAsync(strUser, null);
        }
        
        /// <remarks/>
        public void IfCMDRunAsync(string strUser, object userState) {
            if ((this.IfCMDRunOperationCompleted == null)) {
                this.IfCMDRunOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIfCMDRunOperationCompleted);
            }
            this.InvokeAsync("IfCMDRun", new object[] {
                        strUser}, this.IfCMDRunOperationCompleted, userState);
        }
        
        private void OnIfCMDRunOperationCompleted(object arg) {
            if ((this.IfCMDRunCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IfCMDRunCompleted(this, new IfCMDRunCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetForCMDRun", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetForCMDRun(string strUser) {
            object[] results = this.Invoke("SetForCMDRun", new object[] {
                        strUser});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetForCMDRunAsync(string strUser) {
            this.SetForCMDRunAsync(strUser, null);
        }
        
        /// <remarks/>
        public void SetForCMDRunAsync(string strUser, object userState) {
            if ((this.SetForCMDRunOperationCompleted == null)) {
                this.SetForCMDRunOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetForCMDRunOperationCompleted);
            }
            this.InvokeAsync("SetForCMDRun", new object[] {
                        strUser}, this.SetForCMDRunOperationCompleted, userState);
        }
        
        private void OnSetForCMDRunOperationCompleted(object arg) {
            if ((this.SetForCMDRunCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetForCMDRunCompleted(this, new SetForCMDRunCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetAllForNoCMDRun", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetAllForNoCMDRun() {
            this.Invoke("SetAllForNoCMDRun", new object[0]);
        }
        
        /// <remarks/>
        public void SetAllForNoCMDRunAsync() {
            this.SetAllForNoCMDRunAsync(null);
        }
        
        /// <remarks/>
        public void SetAllForNoCMDRunAsync(object userState) {
            if ((this.SetAllForNoCMDRunOperationCompleted == null)) {
                this.SetAllForNoCMDRunOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAllForNoCMDRunOperationCompleted);
            }
            this.InvokeAsync("SetAllForNoCMDRun", new object[0], this.SetAllForNoCMDRunOperationCompleted, userState);
        }
        
        private void OnSetAllForNoCMDRunOperationCompleted(object arg) {
            if ((this.SetAllForNoCMDRunCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAllForNoCMDRunCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddUser(string strUser) {
            this.Invoke("AddUser", new object[] {
                        strUser});
        }
        
        /// <remarks/>
        public void AddUserAsync(string strUser) {
            this.AddUserAsync(strUser, null);
        }
        
        /// <remarks/>
        public void AddUserAsync(string strUser, object userState) {
            if ((this.AddUserOperationCompleted == null)) {
                this.AddUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserOperationCompleted);
            }
            this.InvokeAsync("AddUser", new object[] {
                        strUser}, this.AddUserOperationCompleted, userState);
        }
        
        private void OnAddUserOperationCompleted(object arg) {
            if ((this.AddUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsUserRegistered", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IsUserRegistered(string strUser) {
            object[] results = this.Invoke("IsUserRegistered", new object[] {
                        strUser});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IsUserRegisteredAsync(string strUser) {
            this.IsUserRegisteredAsync(strUser, null);
        }
        
        /// <remarks/>
        public void IsUserRegisteredAsync(string strUser, object userState) {
            if ((this.IsUserRegisteredOperationCompleted == null)) {
                this.IsUserRegisteredOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsUserRegisteredOperationCompleted);
            }
            this.InvokeAsync("IsUserRegistered", new object[] {
                        strUser}, this.IsUserRegisteredOperationCompleted, userState);
        }
        
        private void OnIsUserRegisteredOperationCompleted(object arg) {
            if ((this.IsUserRegisteredCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsUserRegisteredCompleted(this, new IsUserRegisteredCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Register", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Register(string strUser) {
            this.Invoke("Register", new object[] {
                        strUser});
        }
        
        /// <remarks/>
        public void RegisterAsync(string strUser) {
            this.RegisterAsync(strUser, null);
        }
        
        /// <remarks/>
        public void RegisterAsync(string strUser, object userState) {
            if ((this.RegisterOperationCompleted == null)) {
                this.RegisterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterOperationCompleted);
            }
            this.InvokeAsync("Register", new object[] {
                        strUser}, this.RegisterOperationCompleted, userState);
        }
        
        private void OnRegisterOperationCompleted(object arg) {
            if ((this.RegisterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IfBrowserDump", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IfBrowserDump(string strUser) {
            object[] results = this.Invoke("IfBrowserDump", new object[] {
                        strUser});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IfBrowserDumpAsync(string strUser) {
            this.IfBrowserDumpAsync(strUser, null);
        }
        
        /// <remarks/>
        public void IfBrowserDumpAsync(string strUser, object userState) {
            if ((this.IfBrowserDumpOperationCompleted == null)) {
                this.IfBrowserDumpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIfBrowserDumpOperationCompleted);
            }
            this.InvokeAsync("IfBrowserDump", new object[] {
                        strUser}, this.IfBrowserDumpOperationCompleted, userState);
        }
        
        private void OnIfBrowserDumpOperationCompleted(object arg) {
            if ((this.IfBrowserDumpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IfBrowserDumpCompleted(this, new IfBrowserDumpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IfInstalledAplicationDump", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IfInstalledAplicationDump(string strUser) {
            object[] results = this.Invoke("IfInstalledAplicationDump", new object[] {
                        strUser});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IfInstalledAplicationDumpAsync(string strUser) {
            this.IfInstalledAplicationDumpAsync(strUser, null);
        }
        
        /// <remarks/>
        public void IfInstalledAplicationDumpAsync(string strUser, object userState) {
            if ((this.IfInstalledAplicationDumpOperationCompleted == null)) {
                this.IfInstalledAplicationDumpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIfInstalledAplicationDumpOperationCompleted);
            }
            this.InvokeAsync("IfInstalledAplicationDump", new object[] {
                        strUser}, this.IfInstalledAplicationDumpOperationCompleted, userState);
        }
        
        private void OnIfInstalledAplicationDumpOperationCompleted(object arg) {
            if ((this.IfInstalledAplicationDumpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IfInstalledAplicationDumpCompleted(this, new IfInstalledAplicationDumpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetForNoApplicationDump", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetForNoApplicationDump(string strUser) {
            this.Invoke("SetForNoApplicationDump", new object[] {
                        strUser});
        }
        
        /// <remarks/>
        public void SetForNoApplicationDumpAsync(string strUser) {
            this.SetForNoApplicationDumpAsync(strUser, null);
        }
        
        /// <remarks/>
        public void SetForNoApplicationDumpAsync(string strUser, object userState) {
            if ((this.SetForNoApplicationDumpOperationCompleted == null)) {
                this.SetForNoApplicationDumpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetForNoApplicationDumpOperationCompleted);
            }
            this.InvokeAsync("SetForNoApplicationDump", new object[] {
                        strUser}, this.SetForNoApplicationDumpOperationCompleted, userState);
        }
        
        private void OnSetForNoApplicationDumpOperationCompleted(object arg) {
            if ((this.SetForNoApplicationDumpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetForNoApplicationDumpCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IfKeyLogDump", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IfKeyLogDump(string strUser) {
            object[] results = this.Invoke("IfKeyLogDump", new object[] {
                        strUser});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IfKeyLogDumpAsync(string strUser) {
            this.IfKeyLogDumpAsync(strUser, null);
        }
        
        /// <remarks/>
        public void IfKeyLogDumpAsync(string strUser, object userState) {
            if ((this.IfKeyLogDumpOperationCompleted == null)) {
                this.IfKeyLogDumpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIfKeyLogDumpOperationCompleted);
            }
            this.InvokeAsync("IfKeyLogDump", new object[] {
                        strUser}, this.IfKeyLogDumpOperationCompleted, userState);
        }
        
        private void OnIfKeyLogDumpOperationCompleted(object arg) {
            if ((this.IfKeyLogDumpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IfKeyLogDumpCompleted(this, new IfKeyLogDumpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetForNoKeyDump", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetForNoKeyDump(string strUser) {
            this.Invoke("SetForNoKeyDump", new object[] {
                        strUser});
        }
        
        /// <remarks/>
        public void SetForNoKeyDumpAsync(string strUser) {
            this.SetForNoKeyDumpAsync(strUser, null);
        }
        
        /// <remarks/>
        public void SetForNoKeyDumpAsync(string strUser, object userState) {
            if ((this.SetForNoKeyDumpOperationCompleted == null)) {
                this.SetForNoKeyDumpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetForNoKeyDumpOperationCompleted);
            }
            this.InvokeAsync("SetForNoKeyDump", new object[] {
                        strUser}, this.SetForNoKeyDumpOperationCompleted, userState);
        }
        
        private void OnSetForNoKeyDumpOperationCompleted(object arg) {
            if ((this.SetForNoKeyDumpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetForNoKeyDumpCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IfKeyScreenShare", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IfKeyScreenShare(string strUser) {
            object[] results = this.Invoke("IfKeyScreenShare", new object[] {
                        strUser});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IfKeyScreenShareAsync(string strUser) {
            this.IfKeyScreenShareAsync(strUser, null);
        }
        
        /// <remarks/>
        public void IfKeyScreenShareAsync(string strUser, object userState) {
            if ((this.IfKeyScreenShareOperationCompleted == null)) {
                this.IfKeyScreenShareOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIfKeyScreenShareOperationCompleted);
            }
            this.InvokeAsync("IfKeyScreenShare", new object[] {
                        strUser}, this.IfKeyScreenShareOperationCompleted, userState);
        }
        
        private void OnIfKeyScreenShareOperationCompleted(object arg) {
            if ((this.IfKeyScreenShareCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IfKeyScreenShareCompleted(this, new IfKeyScreenShareCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetMyScreen", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetMyScreen([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] b) {
            this.Invoke("SetMyScreen", new object[] {
                        b});
        }
        
        /// <remarks/>
        public void SetMyScreenAsync(byte[] b) {
            this.SetMyScreenAsync(b, null);
        }
        
        /// <remarks/>
        public void SetMyScreenAsync(byte[] b, object userState) {
            if ((this.SetMyScreenOperationCompleted == null)) {
                this.SetMyScreenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetMyScreenOperationCompleted);
            }
            this.InvokeAsync("SetMyScreen", new object[] {
                        b}, this.SetMyScreenOperationCompleted, userState);
        }
        
        private void OnSetMyScreenOperationCompleted(object arg) {
            if ((this.SetMyScreenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetMyScreenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMyScreen", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetMyScreen() {
            object[] results = this.Invoke("GetMyScreen", new object[0]);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMyScreenAsync() {
            this.GetMyScreenAsync(null);
        }
        
        /// <remarks/>
        public void GetMyScreenAsync(object userState) {
            if ((this.GetMyScreenOperationCompleted == null)) {
                this.GetMyScreenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMyScreenOperationCompleted);
            }
            this.InvokeAsync("GetMyScreen", new object[0], this.GetMyScreenOperationCompleted, userState);
        }
        
        private void OnGetMyScreenOperationCompleted(object arg) {
            if ((this.GetMyScreenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMyScreenCompleted(this, new GetMyScreenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IfWebCamDump", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IfWebCamDump(string strUser) {
            object[] results = this.Invoke("IfWebCamDump", new object[] {
                        strUser});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IfWebCamDumpAsync(string strUser) {
            this.IfWebCamDumpAsync(strUser, null);
        }
        
        /// <remarks/>
        public void IfWebCamDumpAsync(string strUser, object userState) {
            if ((this.IfWebCamDumpOperationCompleted == null)) {
                this.IfWebCamDumpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIfWebCamDumpOperationCompleted);
            }
            this.InvokeAsync("IfWebCamDump", new object[] {
                        strUser}, this.IfWebCamDumpOperationCompleted, userState);
        }
        
        private void OnIfWebCamDumpOperationCompleted(object arg) {
            if ((this.IfWebCamDumpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IfWebCamDumpCompleted(this, new IfWebCamDumpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetMyWebCam", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetMyWebCam([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] b) {
            this.Invoke("SetMyWebCam", new object[] {
                        b});
        }
        
        /// <remarks/>
        public void SetMyWebCamAsync(byte[] b) {
            this.SetMyWebCamAsync(b, null);
        }
        
        /// <remarks/>
        public void SetMyWebCamAsync(byte[] b, object userState) {
            if ((this.SetMyWebCamOperationCompleted == null)) {
                this.SetMyWebCamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetMyWebCamOperationCompleted);
            }
            this.InvokeAsync("SetMyWebCam", new object[] {
                        b}, this.SetMyWebCamOperationCompleted, userState);
        }
        
        private void OnSetMyWebCamOperationCompleted(object arg) {
            if ((this.SetMyWebCamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetMyWebCamCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMyWebCam", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetMyWebCam() {
            object[] results = this.Invoke("GetMyWebCam", new object[0]);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMyWebCamAsync() {
            this.GetMyWebCamAsync(null);
        }
        
        /// <remarks/>
        public void GetMyWebCamAsync(object userState) {
            if ((this.GetMyWebCamOperationCompleted == null)) {
                this.GetMyWebCamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMyWebCamOperationCompleted);
            }
            this.InvokeAsync("GetMyWebCam", new object[0], this.GetMyWebCamOperationCompleted, userState);
        }
        
        private void OnGetMyWebCamOperationCompleted(object arg) {
            if ((this.GetMyWebCamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMyWebCamCompleted(this, new GetMyWebCamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetForNoBrowserDump", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetForNoBrowserDump(string strUser) {
            this.Invoke("SetForNoBrowserDump", new object[] {
                        strUser});
        }
        
        /// <remarks/>
        public void SetForNoBrowserDumpAsync(string strUser) {
            this.SetForNoBrowserDumpAsync(strUser, null);
        }
        
        /// <remarks/>
        public void SetForNoBrowserDumpAsync(string strUser, object userState) {
            if ((this.SetForNoBrowserDumpOperationCompleted == null)) {
                this.SetForNoBrowserDumpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetForNoBrowserDumpOperationCompleted);
            }
            this.InvokeAsync("SetForNoBrowserDump", new object[] {
                        strUser}, this.SetForNoBrowserDumpOperationCompleted, userState);
        }
        
        private void OnSetForNoBrowserDumpOperationCompleted(object arg) {
            if ((this.SetForNoBrowserDumpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetForNoBrowserDumpCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetForBrowserDump", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetForBrowserDump(string strUser) {
            this.Invoke("SetForBrowserDump", new object[] {
                        strUser});
        }
        
        /// <remarks/>
        public void SetForBrowserDumpAsync(string strUser) {
            this.SetForBrowserDumpAsync(strUser, null);
        }
        
        /// <remarks/>
        public void SetForBrowserDumpAsync(string strUser, object userState) {
            if ((this.SetForBrowserDumpOperationCompleted == null)) {
                this.SetForBrowserDumpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetForBrowserDumpOperationCompleted);
            }
            this.InvokeAsync("SetForBrowserDump", new object[] {
                        strUser}, this.SetForBrowserDumpOperationCompleted, userState);
        }
        
        private void OnSetForBrowserDumpOperationCompleted(object arg) {
            if ((this.SetForBrowserDumpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetForBrowserDumpCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUsers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUsers() {
            object[] results = this.Invoke("GetUsers", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUsersAsync() {
            this.GetUsersAsync(null);
        }
        
        /// <remarks/>
        public void GetUsersAsync(object userState) {
            if ((this.GetUsersOperationCompleted == null)) {
                this.GetUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsersOperationCompleted);
            }
            this.InvokeAsync("GetUsers", new object[0], this.GetUsersOperationCompleted, userState);
        }
        
        private void OnGetUsersOperationCompleted(object arg) {
            if ((this.GetUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsersCompleted(this, new GetUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveUser(string strUser) {
            this.Invoke("RemoveUser", new object[] {
                        strUser});
        }
        
        /// <remarks/>
        public void RemoveUserAsync(string strUser) {
            this.RemoveUserAsync(strUser, null);
        }
        
        /// <remarks/>
        public void RemoveUserAsync(string strUser, object userState) {
            if ((this.RemoveUserOperationCompleted == null)) {
                this.RemoveUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserOperationCompleted);
            }
            this.InvokeAsync("RemoveUser", new object[] {
                        strUser}, this.RemoveUserOperationCompleted, userState);
        }
        
        private void OnRemoveUserOperationCompleted(object arg) {
            if ((this.RemoveUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendMessage(string strFromUser, string strToUser, string strMess) {
            this.Invoke("SendMessage", new object[] {
                        strFromUser,
                        strToUser,
                        strMess});
        }
        
        /// <remarks/>
        public void SendMessageAsync(string strFromUser, string strToUser, string strMess) {
            this.SendMessageAsync(strFromUser, strToUser, strMess, null);
        }
        
        /// <remarks/>
        public void SendMessageAsync(string strFromUser, string strToUser, string strMess, object userState) {
            if ((this.SendMessageOperationCompleted == null)) {
                this.SendMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageOperationCompleted);
            }
            this.InvokeAsync("SendMessage", new object[] {
                        strFromUser,
                        strToUser,
                        strMess}, this.SendMessageOperationCompleted, userState);
        }
        
        private void OnSendMessageOperationCompleted(object arg) {
            if ((this.SendMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReceiveMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReceiveMessage(string strUser) {
            object[] results = this.Invoke("ReceiveMessage", new object[] {
                        strUser});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReceiveMessageAsync(string strUser) {
            this.ReceiveMessageAsync(strUser, null);
        }
        
        /// <remarks/>
        public void ReceiveMessageAsync(string strUser, object userState) {
            if ((this.ReceiveMessageOperationCompleted == null)) {
                this.ReceiveMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReceiveMessageOperationCompleted);
            }
            this.InvokeAsync("ReceiveMessage", new object[] {
                        strUser}, this.ReceiveMessageOperationCompleted, userState);
        }
        
        private void OnReceiveMessageOperationCompleted(object arg) {
            if ((this.ReceiveMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReceiveMessageCompleted(this, new ReceiveMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetIfConnect", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetIfConnect(string uid) {
            object[] results = this.Invoke("GetIfConnect", new object[] {
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetIfConnectAsync(string uid) {
            this.GetIfConnectAsync(uid, null);
        }
        
        /// <remarks/>
        public void GetIfConnectAsync(string uid, object userState) {
            if ((this.GetIfConnectOperationCompleted == null)) {
                this.GetIfConnectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIfConnectOperationCompleted);
            }
            this.InvokeAsync("GetIfConnect", new object[] {
                        uid}, this.GetIfConnectOperationCompleted, userState);
        }
        
        private void OnGetIfConnectOperationCompleted(object arg) {
            if ((this.GetIfConnectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIfConnectCompleted(this, new GetIfConnectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetIfUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetIfUpdate(string uid) {
            object[] results = this.Invoke("GetIfUpdate", new object[] {
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetIfUpdateAsync(string uid) {
            this.GetIfUpdateAsync(uid, null);
        }
        
        /// <remarks/>
        public void GetIfUpdateAsync(string uid, object userState) {
            if ((this.GetIfUpdateOperationCompleted == null)) {
                this.GetIfUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIfUpdateOperationCompleted);
            }
            this.InvokeAsync("GetIfUpdate", new object[] {
                        uid}, this.GetIfUpdateOperationCompleted, userState);
        }
        
        private void OnGetIfUpdateOperationCompleted(object arg) {
            if ((this.GetIfUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIfUpdateCompleted(this, new GetIfUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterValue", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RegisterValue(string uniqueIds, string property, string value) {
            this.Invoke("RegisterValue", new object[] {
                        uniqueIds,
                        property,
                        value});
        }
        
        /// <remarks/>
        public void RegisterValueAsync(string uniqueIds, string property, string value) {
            this.RegisterValueAsync(uniqueIds, property, value, null);
        }
        
        /// <remarks/>
        public void RegisterValueAsync(string uniqueIds, string property, string value, object userState) {
            if ((this.RegisterValueOperationCompleted == null)) {
                this.RegisterValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterValueOperationCompleted);
            }
            this.InvokeAsync("RegisterValue", new object[] {
                        uniqueIds,
                        property,
                        value}, this.RegisterValueOperationCompleted, userState);
        }
        
        private void OnRegisterValueOperationCompleted(object arg) {
            if ((this.RegisterValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterValueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetForConnect", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetForConnect(string uid) {
            this.Invoke("SetForConnect", new object[] {
                        uid});
        }
        
        /// <remarks/>
        public void SetForConnectAsync(string uid) {
            this.SetForConnectAsync(uid, null);
        }
        
        /// <remarks/>
        public void SetForConnectAsync(string uid, object userState) {
            if ((this.SetForConnectOperationCompleted == null)) {
                this.SetForConnectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetForConnectOperationCompleted);
            }
            this.InvokeAsync("SetForConnect", new object[] {
                        uid}, this.SetForConnectOperationCompleted, userState);
        }
        
        private void OnSetForConnectOperationCompleted(object arg) {
            if ((this.SetForConnectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetForConnectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetForNoConnect", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetForNoConnect(string uid) {
            this.Invoke("SetForNoConnect", new object[] {
                        uid});
        }
        
        /// <remarks/>
        public void SetForNoConnectAsync(string uid) {
            this.SetForNoConnectAsync(uid, null);
        }
        
        /// <remarks/>
        public void SetForNoConnectAsync(string uid, object userState) {
            if ((this.SetForNoConnectOperationCompleted == null)) {
                this.SetForNoConnectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetForNoConnectOperationCompleted);
            }
            this.InvokeAsync("SetForNoConnect", new object[] {
                        uid}, this.SetForNoConnectOperationCompleted, userState);
        }
        
        private void OnSetForNoConnectOperationCompleted(object arg) {
            if ((this.SetForNoConnectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetForNoConnectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetAllForConnect", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetAllForConnect() {
            this.Invoke("SetAllForConnect", new object[0]);
        }
        
        /// <remarks/>
        public void SetAllForConnectAsync() {
            this.SetAllForConnectAsync(null);
        }
        
        /// <remarks/>
        public void SetAllForConnectAsync(object userState) {
            if ((this.SetAllForConnectOperationCompleted == null)) {
                this.SetAllForConnectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAllForConnectOperationCompleted);
            }
            this.InvokeAsync("SetAllForConnect", new object[0], this.SetAllForConnectOperationCompleted, userState);
        }
        
        private void OnSetAllForConnectOperationCompleted(object arg) {
            if ((this.SetAllForConnectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAllForConnectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetAllForNoConnect", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetAllForNoConnect() {
            this.Invoke("SetAllForNoConnect", new object[0]);
        }
        
        /// <remarks/>
        public void SetAllForNoConnectAsync() {
            this.SetAllForNoConnectAsync(null);
        }
        
        /// <remarks/>
        public void SetAllForNoConnectAsync(object userState) {
            if ((this.SetAllForNoConnectOperationCompleted == null)) {
                this.SetAllForNoConnectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAllForNoConnectOperationCompleted);
            }
            this.InvokeAsync("SetAllForNoConnect", new object[0], this.SetAllForNoConnectOperationCompleted, userState);
        }
        
        private void OnSetAllForNoConnectOperationCompleted(object arg) {
            if ((this.SetAllForNoConnectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAllForNoConnectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetForUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetForUpdate(string uid) {
            this.Invoke("SetForUpdate", new object[] {
                        uid});
        }
        
        /// <remarks/>
        public void SetForUpdateAsync(string uid) {
            this.SetForUpdateAsync(uid, null);
        }
        
        /// <remarks/>
        public void SetForUpdateAsync(string uid, object userState) {
            if ((this.SetForUpdateOperationCompleted == null)) {
                this.SetForUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetForUpdateOperationCompleted);
            }
            this.InvokeAsync("SetForUpdate", new object[] {
                        uid}, this.SetForUpdateOperationCompleted, userState);
        }
        
        private void OnSetForUpdateOperationCompleted(object arg) {
            if ((this.SetForUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetForUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetForNoUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetForNoUpdate(string uid) {
            this.Invoke("SetForNoUpdate", new object[] {
                        uid});
        }
        
        /// <remarks/>
        public void SetForNoUpdateAsync(string uid) {
            this.SetForNoUpdateAsync(uid, null);
        }
        
        /// <remarks/>
        public void SetForNoUpdateAsync(string uid, object userState) {
            if ((this.SetForNoUpdateOperationCompleted == null)) {
                this.SetForNoUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetForNoUpdateOperationCompleted);
            }
            this.InvokeAsync("SetForNoUpdate", new object[] {
                        uid}, this.SetForNoUpdateOperationCompleted, userState);
        }
        
        private void OnSetForNoUpdateOperationCompleted(object arg) {
            if ((this.SetForNoUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetForNoUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetAllForUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetAllForUpdate() {
            this.Invoke("SetAllForUpdate", new object[0]);
        }
        
        /// <remarks/>
        public void SetAllForUpdateAsync() {
            this.SetAllForUpdateAsync(null);
        }
        
        /// <remarks/>
        public void SetAllForUpdateAsync(object userState) {
            if ((this.SetAllForUpdateOperationCompleted == null)) {
                this.SetAllForUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAllForUpdateOperationCompleted);
            }
            this.InvokeAsync("SetAllForUpdate", new object[0], this.SetAllForUpdateOperationCompleted, userState);
        }
        
        private void OnSetAllForUpdateOperationCompleted(object arg) {
            if ((this.SetAllForUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAllForUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetAllForNoUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetAllForNoUpdate() {
            this.Invoke("SetAllForNoUpdate", new object[0]);
        }
        
        /// <remarks/>
        public void SetAllForNoUpdateAsync() {
            this.SetAllForNoUpdateAsync(null);
        }
        
        /// <remarks/>
        public void SetAllForNoUpdateAsync(object userState) {
            if ((this.SetAllForNoUpdateOperationCompleted == null)) {
                this.SetAllForNoUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAllForNoUpdateOperationCompleted);
            }
            this.InvokeAsync("SetAllForNoUpdate", new object[0], this.SetAllForNoUpdateOperationCompleted, userState);
        }
        
        private void OnSetAllForNoUpdateOperationCompleted(object arg) {
            if ((this.SetAllForNoUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAllForNoUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectUsers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable SelectUsers() {
            object[] results = this.Invoke("SelectUsers", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void SelectUsersAsync() {
            this.SelectUsersAsync(null);
        }
        
        /// <remarks/>
        public void SelectUsersAsync(object userState) {
            if ((this.SelectUsersOperationCompleted == null)) {
                this.SelectUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectUsersOperationCompleted);
            }
            this.InvokeAsync("SelectUsers", new object[0], this.SelectUsersOperationCompleted, userState);
        }
        
        private void OnSelectUsersOperationCompleted(object arg) {
            if ((this.SelectUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectUsersCompleted(this, new SelectUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAssembly", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetAssembly(int i) {
            object[] results = this.Invoke("GetAssembly", new object[] {
                        i});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAssemblyAsync(int i) {
            this.GetAssemblyAsync(i, null);
        }
        
        /// <remarks/>
        public void GetAssemblyAsync(int i, object userState) {
            if ((this.GetAssemblyOperationCompleted == null)) {
                this.GetAssemblyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssemblyOperationCompleted);
            }
            this.InvokeAsync("GetAssembly", new object[] {
                        i}, this.GetAssemblyOperationCompleted, userState);
        }
        
        private void OnGetAssemblyOperationCompleted(object arg) {
            if ((this.GetAssemblyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAssemblyCompleted(this, new GetAssemblyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WriteFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void WriteFile(string uid, string user, string program, string filename, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] content) {
            this.Invoke("WriteFile", new object[] {
                        uid,
                        user,
                        program,
                        filename,
                        content});
        }
        
        /// <remarks/>
        public void WriteFileAsync(string uid, string user, string program, string filename, byte[] content) {
            this.WriteFileAsync(uid, user, program, filename, content, null);
        }
        
        /// <remarks/>
        public void WriteFileAsync(string uid, string user, string program, string filename, byte[] content, object userState) {
            if ((this.WriteFileOperationCompleted == null)) {
                this.WriteFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWriteFileOperationCompleted);
            }
            this.InvokeAsync("WriteFile", new object[] {
                        uid,
                        user,
                        program,
                        filename,
                        content}, this.WriteFileOperationCompleted, userState);
        }
        
        private void OnWriteFileOperationCompleted(object arg) {
            if ((this.WriteFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WriteFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SendCmdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ReadCmdCompletedEventHandler(object sender, ReadCmdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReadCmdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReadCmdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ClearCmdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SendOutputCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ReadOutputCompletedEventHandler(object sender, ReadOutputCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReadOutputCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReadOutputCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ClearOutputCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void IfCMDRunCompletedEventHandler(object sender, IfCMDRunCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IfCMDRunCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IfCMDRunCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SetForCMDRunCompletedEventHandler(object sender, SetForCMDRunCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetForCMDRunCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetForCMDRunCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SetAllForNoCMDRunCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AddUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void IsUserRegisteredCompletedEventHandler(object sender, IsUserRegisteredCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsUserRegisteredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsUserRegisteredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void RegisterCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void IfBrowserDumpCompletedEventHandler(object sender, IfBrowserDumpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IfBrowserDumpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IfBrowserDumpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void IfInstalledAplicationDumpCompletedEventHandler(object sender, IfInstalledAplicationDumpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IfInstalledAplicationDumpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IfInstalledAplicationDumpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SetForNoApplicationDumpCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void IfKeyLogDumpCompletedEventHandler(object sender, IfKeyLogDumpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IfKeyLogDumpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IfKeyLogDumpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SetForNoKeyDumpCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void IfKeyScreenShareCompletedEventHandler(object sender, IfKeyScreenShareCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IfKeyScreenShareCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IfKeyScreenShareCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SetMyScreenCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetMyScreenCompletedEventHandler(object sender, GetMyScreenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMyScreenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMyScreenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void IfWebCamDumpCompletedEventHandler(object sender, IfWebCamDumpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IfWebCamDumpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IfWebCamDumpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SetMyWebCamCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetMyWebCamCompletedEventHandler(object sender, GetMyWebCamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMyWebCamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMyWebCamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SetForNoBrowserDumpCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SetForBrowserDumpCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetUsersCompletedEventHandler(object sender, GetUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void RemoveUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SendMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ReceiveMessageCompletedEventHandler(object sender, ReceiveMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReceiveMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReceiveMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetIfConnectCompletedEventHandler(object sender, GetIfConnectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIfConnectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIfConnectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetIfUpdateCompletedEventHandler(object sender, GetIfUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIfUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIfUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void RegisterValueCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SetForConnectCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SetForNoConnectCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SetAllForConnectCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SetAllForNoConnectCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SetForUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SetForNoUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SetAllForUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SetAllForNoUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SelectUsersCompletedEventHandler(object sender, SelectUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetAssemblyCompletedEventHandler(object sender, GetAssemblyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAssemblyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAssemblyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void WriteFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591